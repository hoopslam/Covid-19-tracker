{"version":3,"sources":["Components/Loader.jsx","Components/InfoCard.jsx","Components/Donut.jsx","Components/HistoricalGraph.jsx","Components/CountrySummary.jsx","Components/util.js","Components/TypeSelector.jsx","Components/BarGraph.jsx","Components/SelectedApp.jsx","Components/SearchBar.jsx","Components/Selectors.jsx","Components/ChangeView.jsx","Components/MapComponent.jsx","Components/LoadedApp.jsx","Components/Footer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Loader","className","InfoCard","text","total","today","color","style","numeral","format","Donut","data","options","HistoricalGraph","selectedCountryInfo","useState","historicalData","setHistoricalData","legend","display","title","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","ticks","callback","index","values","useEffect","a","country","fetch","fetchedWorldData","json","dataWorldJson","historicalTotal","countryInfo","iso2","fetchedData","dataJson","timeline","console","log","filterData","fetchData","previousCasesData","newCases","date","cases","newDate","x","y","push","datasets","CountrySummary","tooltipPercentage","dataset","datasetIndex","_meta","Object","keys","currentValue","parseFloat","toFixed","labels","flag","src","alt","height","width","boxShadow","population","todayCases","recovered","todayRecovered","deaths","todayDeaths","backgroundColor","position","active","critical","typeColors","multiplier","casesPerOneMillion","deathsPerOneMillion","tests","countriesVaccine","makeCircle","selectedDataTypeData","countryChangeHandler","map","typeValue","Circle","center","lat","lng","pathOptions","cat","fillColor","fillOpacity","Math","sqrt","PI","eventHandlers","click","Tooltip","TypeSelector","selectedDataType","typeChangeHandler","styleOptions","dataType","onClick","data-value","CountriesList","worldData","sortedData","sort","b","slice","marginRight","id","iso3","SelectedApp","BarGraph","SearchBar","countryNames","filteredCountries","setFilteredCountries","inputValue","setInputValue","placeholder","onKeyUp","e","key","filter","toLowerCase","startsWith","target","onChange","length","i","Selectors","ChangeView","useMap","setView","MapComponent","mapCenter","selectedCountry","zoom","MapContainer","scrollWheelZoom","TileLayer","attribution","url","LoadedApp","globalData","setSelectedCountry","setSelectedDataType","setSelectedDataTypeData","setSelectedCountryInfo","makeCountryInfo","makeDataTypeData","selectedType","countriesDetailArray","countries","countryObject","_id","long","countryVacData","find","vacCountry","world","innerText","Footer","href","rel","App","setGlobalData","Promise","all","then","res","catch","err","worldVaccine","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b31eac89.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Loader.css\";\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader\">\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst InfoCard = ({ text, total, today, color=\"rgb(24, 35, 54)\" }) => {\r\n\treturn (\r\n\t\t<div className=\"InfoCard-container\">\r\n\t\t\t<div className='InfoCard-title'>{text}</div>\r\n\t\t\t<div className='InfoCard-total' style={{color: color}}>{numeral(total).format(\"0,0\")}</div>\r\n\t\t\t<div className='InfoCard-today'>+ {numeral(today).format(\"0,0\")}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default InfoCard;\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nconst Donut = ({ data, options }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Doughnut\r\n\t\t\t\tdata={data}\r\n\t\t\t\toptions={options}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Donut;\r\n","import React, {useState, useEffect} from 'react'\r\nimport Loader from './Loader';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst HistoricalGraph = ({selectedCountryInfo}) => {\r\n    const [historicalData, setHistoricalData] = useState([])\r\n    const options = {\r\n        legend: {\r\n            display: false,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: \"New Cases by Date\"\r\n        },\r\n        elements: {\r\n            point: {\r\n                radius: 0,\r\n            },\r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n            callbacks: {\r\n                label: function (tooltipItem) {\r\n                    return numeral(tooltipItem.value).format(\"0,0\");\r\n                },\r\n            },\r\n        },\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    type: \"time\",\r\n                    time: {\r\n                        format: \"MM/DD/YY\",\r\n                        tooltipFormat: \"ll\",\r\n                    },\r\n                },\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        callback: function (value, index, values) {\r\n                            return numeral(value).format(\"0a\");\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let historicalTotal;\r\n            try {\r\n                if(!selectedCountryInfo.country) {\r\n                    const fetchedWorldData = await fetch ('https://disease.sh/v3/covid-19/historical/all?lastdays=all')\r\n                    const dataWorldJson = await fetchedWorldData.json();\r\n                    historicalTotal = dataWorldJson;\r\n                } else {\r\n                    const fetchedData = await fetch(`https://disease.sh/v3/covid-19/historical/${selectedCountryInfo.countryInfo.iso2}?lastdays=all\r\n                    `)\r\n                    const dataJson = await fetchedData.json()\r\n                    historicalTotal = dataJson.timeline\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n            setHistoricalData(filterData(historicalTotal)) \r\n        }\r\n        fetchData();\r\n    }, [selectedCountryInfo])\r\n\r\n    const filterData = (historicalTotal) => {\r\n        let newCases = [];\r\n        let previousCasesData;\r\n        for (let date in historicalTotal.cases) {\r\n            if (previousCasesData) {\r\n                let newDate = {\r\n                    x: date,\r\n                    y: historicalTotal.cases[date] - previousCasesData,\r\n                }\r\n                newCases.push(newDate);\r\n            }\r\n            previousCasesData = historicalTotal.cases[date];\r\n        }\r\n        return newCases;        \r\n    }\r\n\r\n    return (\r\n        <div className=\"HistoricalGraph\">\r\n            {!historicalData ? <Loader />:\r\n                <Line options={options} data={{datasets: [{data: historicalData}]}}/>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HistoricalGraph\r\n","import React from \"react\";\r\nimport InfoCard from \"./InfoCard\";\r\nimport Donut from \"./Donut\";\r\nimport HistoricalGraph from \"./HistoricalGraph\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction CountrySummary({ selectedCountryInfo }) {\r\n\tconst tooltipPercentage = {\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function (tooltipItem, data) {\r\n\t\t\t\tvar dataset = data.datasets[tooltipItem.datasetIndex];\r\n\t\t\t\tvar meta = dataset._meta[Object.keys(dataset._meta)[0]];\r\n\t\t\t\tvar total = meta.total;\r\n\t\t\t\tvar currentValue = dataset.data[tooltipItem.index];\r\n\t\t\t\tvar percentage = parseFloat(((currentValue / total) * 100).toFixed(1));\r\n\t\t\t\treturn currentValue + \" (\" + percentage + \"%)\";\r\n\t\t\t},\r\n\t\t\ttitle: function (tooltipItem, data) {\r\n\t\t\t\treturn data.labels[tooltipItem[0].index];\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\treturn (\r\n\t\t<div className='country-summary-container'>\r\n\t\t\t<div className='country-name'>\r\n\t\t\t\t{selectedCountryInfo.countryInfo.flag ? (\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={selectedCountryInfo.countryInfo.flag}\r\n\t\t\t\t\t\talt='flag'\r\n\t\t\t\t\t\tstyle={{ height: \"70px\", width: \"auto\", boxShadow: \"2px 2px 5px grey\" }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : null}\r\n\t\t\t\t<h2>\r\n\t\t\t\t\t{selectedCountryInfo.country\r\n\t\t\t\t\t\t? selectedCountryInfo.country\r\n\t\t\t\t\t\t: \"Worldwide Summary\"}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tPopulation: <b>{numeral(selectedCountryInfo.population).format(\"0,0\")}</b>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className='InfoCard-row'>\r\n\t\t\t\t<InfoCard\r\n\t\t\t\t\ttext={\"Total Cases\"}\r\n\t\t\t\t\ttotal={selectedCountryInfo.cases}\r\n\t\t\t\t\ttoday={selectedCountryInfo.todayCases}\r\n\t\t\t\t/>\r\n\t\t\t\t<InfoCard\r\n\t\t\t\t\ttext={\"Total Recovered\"}\r\n\t\t\t\t\ttotal={selectedCountryInfo.recovered}\r\n\t\t\t\t\ttoday={selectedCountryInfo.todayRecovered}\r\n\t\t\t\t\tcolor={\"#0088ff\"}\r\n\t\t\t\t/>\r\n\t\t\t\t<InfoCard\r\n\t\t\t\t\ttext={\"Total Deaths\"}\r\n\t\t\t\t\ttotal={selectedCountryInfo.deaths}\r\n\t\t\t\t\ttoday={selectedCountryInfo.todayDeaths}\r\n\t\t\t\t\tcolor={\"#ff1616e0\"}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"percentages\">\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className='HistoricalGraph-container'>\r\n\t\t\t\t<HistoricalGraph selectedCountryInfo={selectedCountryInfo} />\r\n\t\t\t</div>\r\n\t\t\t<div className='Donut-container'>\r\n\t\t\t\t<Donut\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tdata: [\r\n\t\t\t\t\t\t\t\t\tselectedCountryInfo.cases,\r\n\t\t\t\t\t\t\t\t\tselectedCountryInfo.population - selectedCountryInfo.cases,\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t\t\t\"rgba(255, 22, 22, 0.8)\",\r\n\t\t\t\t\t\t\t\t\t\"rgba(200, 200, 200, 0.8)\",\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tlabels: [\"Cases\", \"No Reported Infection\"],\r\n\t\t\t\t\t}}\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\ttooltips: tooltipPercentage,\r\n\t\t\t\t\t\ttitle: {\r\n\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\ttext: \"Cases\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\t\tposition: \"bottom\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<Donut\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tdata: [\r\n\t\t\t\t\t\t\t\t\tselectedCountryInfo.recovered,\r\n\t\t\t\t\t\t\t\t\tselectedCountryInfo.active + selectedCountryInfo.critical,\r\n\t\t\t\t\t\t\t\t\tselectedCountryInfo.deaths,\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t\t\t\"rgba(0, 122, 255, 0.8)\",\r\n\t\t\t\t\t\t\t\t\t\"rgba(200, 200, 200, 0.8)\",\r\n\t\t\t\t\t\t\t\t\t\"rgba(255, 22, 22, 0.8)\",\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tlabels: [\"Recovered\", \"Ongoing Case\", \"Dead\"],\r\n\t\t\t\t\t}}\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\ttooltips: tooltipPercentage,\r\n\t\t\t\t\t\ttitle: {\r\n\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\ttext: \"Among Confirmed Cases\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\t\tposition: \"bottom\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CountrySummary;\r\n","import React from \"react\";\r\nimport { Circle, Tooltip } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nexport const typeColors = {\r\n\tcases: {\r\n\t\tcolor: \"#ff1616e0\",\r\n\t\tmultiplier: 300,\r\n\t},\r\n\ttodayCases: {\r\n\t\tcolor: \"#ff1616e0\",\r\n\t\tmultiplier: 2500,\r\n\t},\r\n\tdeaths: {\r\n\t\tcolor: \"#ff1616e0\",\r\n\t\tmultiplier: 1000,\r\n\t},\r\n\ttodayDeaths: {\r\n\t\tcolor: \"#ff1616e0\",\r\n\t\tmultiplier: 10000,\r\n\t},\r\n\trecovered: {\r\n\t\tcolor: \"#0088ff\",\r\n\t\tmultiplier: 300,\r\n\t},\r\n\ttodayRecovered: {\r\n\t\tcolor: \"#0088ff\",\r\n\t\tmultiplier: 2000,\r\n\t},\r\n\tactive: {\r\n\t\tcolor: \"#ff1616e0\",\r\n\t\tmultiplier: 300,\r\n\t},\r\n\tcritical: {\r\n\t\tcolor: \"#ff1616e0\",\r\n\t\tmultiplier: 4000,\r\n\t},\r\n\tcasesPerOneMillion: {\r\n\t\tcolor:\"#ff1616e0\",\r\n\t\tmultiplier: 500,\r\n\t},\r\n\tdeathsPerOneMillion: {\r\n\t\tcolor: \"#ff1616e0\",\r\n\t\tmultiplier: 5000,\r\n\t},\r\n\ttests: {\r\n\t\tcolor: \"#0088ff\",\r\n\t\tmultiplier: 100\r\n\t},\r\n\tcountriesVaccine: {\r\n\t\tcolor: \"#0088ff\",\r\n\t\tmultiplier: 100\r\n\t}\r\n};\r\n\r\nexport const makeCircle = (selectedDataTypeData, countryChangeHandler) => {\r\n\treturn selectedDataTypeData.map(\r\n\t\t(country) =>\r\n\t\t\t(country.typeValue > 0) && country.iso2 && (\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tcenter={[country.lat, country.lng]}\r\n\t\t\t\t\tpathOptions={{\r\n\t\t\t\t\t\tcolor: typeColors[country.cat].color,\r\n\t\t\t\t\t\tfillColor: typeColors[country.cat].color,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tfillOpacity={0.5}\r\n\t\t\t\t\tradius={typeColors[country.cat].multiplier * Math.sqrt((country.typeValue / Math.PI))}\r\n\t\t\t\t\tkey={country.iso2}\r\n\t\t\t\t\teventHandlers={{\r\n\t\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\t\tcountryChangeHandler(country.country)\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<Tooltip>\r\n\t\t\t\t\t\t<div className='Tooltip-container'>\r\n\t\t\t\t\t\t\t{country.flag ? (\r\n\t\t\t\t\t\t\t\t<img \r\n\t\t\t\t\t\t\t\t\tsrc={country.flag}\r\n\t\t\t\t\t\t\t\t\talt='flag'\r\n\t\t\t\t\t\t\t\t\tstyle={{ height: \"30px\", width: \"auto\" }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t<div>{country.country}</div>\r\n\t\t\t\t\t\t\t<div>{`${country.text}: ${numeral(country.typeValue).format(\r\n\t\t\t\t\t\t\t\t\"0,0\"\r\n\t\t\t\t\t\t\t)}`}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</Circle>\r\n\t\t\t)\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport { typeColors } from \"./util\";\r\n\r\nfunction TypeSelector({ selectedDataType, typeChangeHandler, styleOptions={ backgroundColor: typeColors[selectedDataType.dataType].color} }) {\r\n\treturn (\r\n\t\t<div className='dropdown'>\r\n\t\t\t<button\r\n\t\t\t\tclassName='dropbtn'\r\n\t\t\t\tstyle={styleOptions}>\r\n\t\t\t\t{selectedDataType.text}\r\n\t\t\t</button>\r\n\t\t\t<div className='dropdown-content type'>\r\n\t\t\t\t<div className='menuItem' onClick={typeChangeHandler} data-value='active'>\r\n\t\t\t\t\tActive Cases\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='menuItem' onClick={typeChangeHandler} data-value='todayCases'>\r\n\t\t\t\t\tNew Cases\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='menuItem' onClick={typeChangeHandler} data-value='cases'>\r\n\t\t\t\t\tTotal Cases\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='menuItem' onClick={typeChangeHandler} data-value='deaths'>\r\n\t\t\t\t\tTotal Deaths\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='menuItem' onClick={typeChangeHandler} data-value='recovered'>\r\n\t\t\t\t\tTotal Recovered\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='menuItem' onClick={typeChangeHandler} data-value='tests'>\r\n\t\t\t\t\tTests Administered\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"menuItem\" onClick={typeChangeHandler} data-value='countriesVaccine'>\r\n\t\t\t\t\tVaccines Administered\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default TypeSelector;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { typeColors } from \"./util\";\r\nimport TypeSelector from \"./TypeSelector\";\r\n\r\nfunction CountriesList({\r\n\tselectedDataType,\r\n\tselectedDataTypeData,\r\n\tcountryChangeHandler,\r\n\tworldData,\r\n\ttypeChangeHandler,\r\n}) {\r\n\tlet sortedData = selectedDataTypeData.sort((a, b) => b.typeValue - a.typeValue).slice(0, 80);\r\n\r\n\treturn (\r\n\t\t<div className='CountriesList'>\r\n\t\t\t<div className='list-container'>\r\n\t\t\t\t<div className='list-country-button'>\r\n\t\t\t\t\t<TypeSelector\r\n\t\t\t\t\t\ttypeChangeHandler={typeChangeHandler}\r\n\t\t\t\t\t\tselectedDataType={selectedDataType}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='list-country-data'\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tcountryChangeHandler(\"Worldwide\");\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<div className='button-left' style={{ width: \"70px\" }}>\r\n\t\t\t\t\t\tWorld\r\n\t\t\t\t\t</div>{\" \"}\r\n\t\t\t\t\t{/* key used here to let react know this needs to be rerendered to show animation again */}\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={selectedDataType.dataType}\r\n\t\t\t\t\t\tclassName='button-right'\r\n\t\t\t\t\t\tstyle={{ width: \"100%\" }}>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName='list-bar world'\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t\t\theight: \"20px\",\r\n\t\t\t\t\t\t\t\tmarginRight: \"5px\",\r\n\t\t\t\t\t\t\t\tbackgroundColor: `${typeColors[selectedDataType.dataType].color}`,\r\n\t\t\t\t\t\t\t}}></div>\r\n\t\t\t\t\t\t<div className='list-number'>{numeral(worldData).format(\"0,0\")}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{sortedData.map(\r\n\t\t\t\t\t(country) =>\r\n\t\t\t\t\t\tcountry.id && (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName='list-country-data'\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tcountryChangeHandler(country.country);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tkey={country.id}>\r\n\t\t\t\t\t\t\t\t<div className='button-left' style={{ width: \"70px\" }}>\r\n\t\t\t\t\t\t\t\t\t{country.iso3}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName='button-right'\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\r\n\t\t\t\t\t\t\t\t\tkey={country.typeValue}>\r\n\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\tclassName='list-bar'\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\twidth: `${(country.typeValue / worldData) * 100}%`,\r\n\t\t\t\t\t\t\t\t\t\t\theight: \"20px\",\r\n\t\t\t\t\t\t\t\t\t\t\tmarginRight: \"5px\",\r\n\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: `${typeColors[country.cat].color}`,\r\n\t\t\t\t\t\t\t\t\t\t}}></div>\r\n\t\t\t\t\t\t\t\t\t<div className='list-number'>\r\n\t\t\t\t\t\t\t\t\t\t{numeral(country.typeValue).format(\"0,0\")}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CountriesList;\r\n","import React from \"react\";\r\nimport CountrySummary from \"./CountrySummary\";\r\nimport BarGraph from \"./BarGraph\";\r\n\r\nconst SelectedApp = ({\r\n\tselectedCountryInfo,\r\n\tselectedDataTypeData,\r\n\tselectedDataType,\r\n\tcountryChangeHandler,\r\n\tworldData,\r\n\ttypeChangeHandler\r\n}) => {\r\n\treturn (\r\n\t\t<div className='SelectedApp'>\r\n\t\t\t<div className='details'>\r\n\t\t\t<section className='country-section'>\r\n\t\t\t\t\t<CountrySummary selectedCountryInfo={selectedCountryInfo}/>\r\n\t\t\t\t</section>\r\n\t\t\t\t<section className='type-list'>\r\n\t\t\t\t\t<BarGraph\r\n\t\t\t\t\t\tselectedDataType={selectedDataType}\r\n\t\t\t\t\t\tselectedDataTypeData={selectedDataTypeData}\r\n\t\t\t\t\t\tcountryChangeHandler={countryChangeHandler}\r\n\t\t\t\t\t\tworldData={worldData}\r\n\t\t\t\t\t\ttypeChangeHandler={typeChangeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</section>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SelectedApp;\r\n","import React , {useState} from 'react';\r\n\r\nfunction SearchBar({ countryChangeHandler, countryNames }) {\r\n    const [filteredCountries, setFilteredCountries] = useState([]);\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleKeyUp = (e) => {  // Used to handle \"Enter\" without a button\r\n        if (e.key === \"Enter\") { \r\n            if(inputValue){\r\n                countryChangeHandler(filteredCountries[0])\r\n                setFilteredCountries([])\r\n            } else {\r\n                countryChangeHandler(\"Worldwide\")\r\n            }\r\n            setInputValue(\"\")\r\n        } else {\r\n            setFilteredCountries(\r\n            countryNames.filter(country => {\r\n              return country.toLowerCase().startsWith(e.target.value.toLowerCase())  //using .startsWith so that the filter matches based on starting letters\r\n            })\r\n            )\r\n        }\r\n    }\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    return (\r\n        <div className=\"search-dropdown\">\r\n            <input\r\n                type=\"search\" \r\n                placeholder=\"Search Country\" \r\n                onKeyUp={handleKeyUp}  //Used because onChange doesn't handle \"Enter\" key press without a button.  I don't want a button so I am using keyup\r\n                onChange={handleChange}\r\n                value={inputValue}\r\n            />\r\n            <div className=\"search-dropdown-content\">\r\n                {filteredCountries.length < 50 && filteredCountries.map((country, i) => (\r\n                    <div className=\"menuItem\" key={i} onClick={() => {\r\n                        setInputValue(\"\")\r\n                        setFilteredCountries([])\r\n                        countryChangeHandler(country)}}>{country}</div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport TypeSelector from \"./TypeSelector\";\r\n\r\nconst Selectors = ({\r\n\tcountryChangeHandler,\r\n\tcountryNames,\r\n\tselectedDataType,\r\n\ttypeChangeHandler,\r\n}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav className='LoadedApp-nav'>\r\n\t\t\t\t<SearchBar\r\n\t\t\t\t\tcountryChangeHandler={countryChangeHandler}\r\n\t\t\t\t\tcountryNames={countryNames}\r\n\t\t\t\t/>\r\n\t\t\t\t<TypeSelector\r\n\t\t\t\t\tselectedDataType={selectedDataType}\r\n\t\t\t\t\ttypeChangeHandler={typeChangeHandler}\r\n\t\t\t\t/>\r\n\t\t\t</nav>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Selectors;\r\n","import { useMap } from \"react-leaflet\";\r\n\r\nfunction ChangeView({ center}) {\r\n    const map = useMap();\r\n    map.setView(center);\r\n    return null;\r\n}\r\n\r\nexport default ChangeView\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport ChangeView from \"./ChangeView\";\r\nimport { makeCircle } from \"./util\";\r\nimport Loader from \"./Loader\";\r\n\r\nfunction MapComponent({selectedDataTypeData, mapCenter, selectedCountry, countryChangeHandler}) {\r\n\tlet zoom = 4;\r\n\tif(selectedCountry===\"Worldwide\"){\r\n\t\tzoom = 2;\r\n\t}\r\n\tif (!selectedDataTypeData || !mapCenter) {\r\n\t\treturn (\r\n\t\t\t<div className='Loader-container'>\r\n\t\t\t\t<Loader />\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else \r\n\r\n\treturn (\r\n\t\t<div className='map'>\r\n\t\t\t<MapContainer center={mapCenter} zoom={zoom} scrollWheelZoom={false} >\r\n\t\t\t\t<ChangeView center={mapCenter} zoom={zoom} />\r\n\t\t\t\t{makeCircle(selectedDataTypeData, countryChangeHandler)}\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t\turl='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n\t\t\t\t/>\r\n\t\t\t</MapContainer>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default MapComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport SelectedApp from \"./SelectedApp\";\r\nimport Selectors from \"./Selectors\";\r\nimport MapComponent from \"./MapComponent\";\r\n\r\nconst LoadedApp = ({ globalData, countryNames }) => {\r\n\tconst [selectedCountry, setSelectedCountry] = useState(\"Worldwide\");\r\n\tconst [selectedDataType, setSelectedDataType] = useState({\r\n\t\ttext: \"Active Cases\",\r\n\t\tdataType: \"active\",\r\n\t});\r\n\tconst [selectedDataTypeData, setSelectedDataTypeData] = useState();\r\n\tconst [selectedCountryInfo, setSelectedCountryInfo] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tmakeCountryInfo(\"Worldwide\");\r\n\t\tmakeDataTypeData(selectedDataType);\r\n\t}, []);\r\n\r\n\t//Called in typeChangeHandler.  Fires up whenever a new data type is selected\r\n\tconst makeDataTypeData = (selectedType) => {\r\n\t\tlet countriesDetailArray = globalData.countries.map((country) => {\r\n\t\t\tlet countryObject = {\r\n\t\t\t\tcountry: country.country,\r\n\t\t\t\tflag: country.countryInfo.flag,\r\n\t\t\t\tid: country.countryInfo._id,\r\n\t\t\t\tiso2: country.countryInfo.iso2,\r\n\t\t\t\tiso3: country.countryInfo.iso3,\r\n\t\t\t\tlat: country.countryInfo.lat,\r\n\t\t\t\tlng: country.countryInfo.long,\r\n\t\t\t\tcat: selectedType.dataType,\r\n\t\t\t\ttext: selectedType.text,\r\n\t\t\t}\r\n\t\t\tcountry[selectedType.dataType] ? countryObject.typeValue = country[selectedType.dataType]\r\n\t\t\t\t:countryObject.typeValue = 0;  //Some countries do not have vaccine data, so 0 is placed as value if datatype is vaccine\r\n\t\t\t\r\n\t\t\tif(selectedType.dataType !== 'countriesVaccine'){\r\n\t\t\t\treturn countryObject;\r\n\t\t\t} else { //It is data type countriesVaccine\r\n\t\t\t\tlet countryVacData = globalData.countriesVaccine.find((vacCountry) => vacCountry.country === country.country) //check if country has vaccine data\r\n\t\t\t\tcountryVacData && (countryObject.typeValue = Object.values(countryVacData.timeline)[0]) //country has vaccine data, push into typeValue\r\n\t\t\t\treturn countryObject;\r\n\t\t\t}\r\n\t\t})\r\n\t\tsetSelectedDataTypeData(countriesDetailArray)\r\n\t};\r\n\r\n\t//Called in CountryChangeHandler.  Fires up whenever a new country is selected\r\n\tconst makeCountryInfo = (selectedCountry) => {\r\n\t\tselectedCountry === \"Worldwide\"\r\n\t\t\t? setSelectedCountryInfo(globalData.world)\r\n\t\t\t: setSelectedCountryInfo(\r\n\t\t\t\t\tglobalData.countries.find((country) => country.country === selectedCountry)\r\n\t\t\t  );\r\n\t};\r\n\r\n\tconst countryChangeHandler = (selectedCountry) => {\r\n\t\tsetSelectedCountry(selectedCountry);\r\n\t\tmakeCountryInfo(selectedCountry);\r\n\t};\r\n\r\n\tconst typeChangeHandler = (selectedType) => {\r\n\t\tlet data = {\r\n\t\t\ttext: selectedType.target.innerText,\r\n\t\t\tdataType: selectedType.target.dataset.value,\r\n\t\t};\r\n\t\tsetSelectedDataType(data);\r\n\t\tmakeDataTypeData(data);\r\n\t};\r\n\tif (!selectedDataTypeData || !selectedCountryInfo) {\r\n\t\treturn (\r\n\t\t\t<div className='Loader-container'>\r\n\t\t\t\t<Loader />\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className='Loaded-app'>\r\n\t\t\t\t<header className='LoadedApp-header'>\r\n\t\t\t\t\t<h1>Global Covid-19 Tracker</h1>\r\n\t\t\t\t\t<Selectors\r\n\t\t\t\t\t\tcountryChangeHandler={countryChangeHandler}\r\n\t\t\t\t\t\tcountryNames={countryNames}\r\n\t\t\t\t\t\tselectedCountry={selectedCountry}\r\n\t\t\t\t\t\tselectedDataType={selectedDataType}\r\n\t\t\t\t\t\ttypeChangeHandler={typeChangeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className='map-container'>\r\n\t\t\t\t\t\t<MapComponent\r\n\t\t\t\t\t\t\tselectedDataTypeData={selectedDataTypeData}\r\n\t\t\t\t\t\t\tmapCenter={{\r\n\t\t\t\t\t\t\t\tlat: selectedCountryInfo.countryInfo.lat,\r\n\t\t\t\t\t\t\t\tlng: selectedCountryInfo.countryInfo.long,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tselectedCountry={selectedCountry}\r\n\t\t\t\t\t\t\tcountryChangeHandler={countryChangeHandler}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</header>\r\n\t\t\t\t<SelectedApp\r\n\t\t\t\t\tselectedDataTypeData={selectedDataTypeData}\r\n\t\t\t\t\tselectedCountryInfo={selectedCountryInfo}\r\n\t\t\t\t\tselectedCountry={selectedCountry}\r\n\t\t\t\t\tselectedDataType={selectedDataType}\r\n\t\t\t\t\tcountryChangeHandler={countryChangeHandler}\r\n\t\t\t\t\ttypeChangeHandler={typeChangeHandler}\r\n\t\t\t\t\tworldData={globalData.world[selectedDataType.dataType]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default LoadedApp;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<div className='Footer'>\r\n\t\t\t<div className='Footer-container'>\r\n\t\t\t\t<p>Covid-19 data sourced from Worldometers & Johns Hopkins University</p>\r\n\t\t\t\t<p>\r\n\t\t\t\tProvided by <a href='http://www.disease.sh'target=\"_blank\" rel=\"noreferrer\">disease.sh</a>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>Website developed by David Cho &copy; 2021</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tReach me <a href='mailto:hoopslam@gmail.com'>hoopslam@gmail.com</a>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport LoadedApp from \"./Components/LoadedApp\";\nimport Loader from \"./Components/Loader\";\nimport Footer from \"./Components/Footer\";\n\nfunction App() {\n\tconst [globalData, setGlobalData] = useState({});\n\n\tuseEffect(() => {\n\t\t/* fetching the following data: Global totals, totals for each individual country, vaccine\n\t\t numbers for each country, and vaccine numbers globally.  Each are stored at different endpoints\n\t\t  so we are fetching them all and reorganizing the necesarry data here. */\n\t\t  \n\t\tconst fetchData = async () => {\n\t\t\tconst [world, countries, countriesVaccine, worldVaccine] = await Promise.all([\n\t\t\t\tfetch(\"https://disease.sh/v3/covid-19/all?yesterday=true\").then((res) =>\n\t\t\t\t\tres.json()\n\t\t\t\t),\n\t\t\t\tfetch(\"https://disease.sh/v3/covid-19/countries?yesterday=true\").then((res) =>\n\t\t\t\t\tres.json()\n\t\t\t\t),\n\t\t\t\tfetch(\n\t\t\t\t\t\"https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=1\"\n\t\t\t\t).then((res) => res.json()),\n\t\t\t\tfetch(\"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=1\").then((res) =>\n\t\t\t\t\tres.json()\n\t\t\t\t),\n\t\t\t]).catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t\t\tworld.countryInfo = { lat: 15, long: 0 };\n\t\t\tworld.countriesVaccine = Object.values(worldVaccine)[0];\n\n\t\t\tsetGlobalData({\n\t\t\t\tworld: world,\n\t\t\t\tcountries: countries,\n\t\t\t\tcountriesVaccine: countriesVaccine,\n\t\t\t});\n\t\t};\n\t\tfetchData();\n\t}, []);\n\tif (!globalData.world || !globalData.countries) {\n\t\treturn (\n\t\t\t<div className='Loader-container'>\n\t\t\t\t<Loader />\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<LoadedApp\n\t\t\t\t\tglobalData={globalData}\n\t\t\t\t\tcountryNames={globalData.countries.map((country) => country.country)}\n\t\t\t\t/>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}